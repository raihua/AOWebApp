@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "Annual Sales";
}

<h2>Annual Sales Report</h2>

<div class="row">
    <div class="col">
        <select name="year" asp-items="@Model" class="form-control">
            <option value="">Select...</option>
        </select>
    </div>
</div>

<div class="row">
    <div class="col">
        <svg width="100%" height="600px" class="border border-primary rounded p-2">

        </svg>
    </div>
</div>

@section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        // 3 creating the fetch request
        document.getElementsByName("year")[0].addEventListener("change", (e) => {
            let year = e.target.value;

            if (year != null) {
                fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                .then(res => res.json())
                .then(data => {
                    buildGraph(data);
                })
                .catch(err => {
                    console.log(err.message);
                })
            }

        })

        function buildGraph(dataSet) {
            // 1 select svg element
            let svg = d3.select("svg");

            // 2 determine the size of the svg element
            let height = svg.node().getBoundingClientRect().height;
            let width = svg.node().getBoundingClientRect().width;

            let maxTotalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
            let maxTotalItems = maxTotalItemsRange[1];

            // 4 calculating the bar dimensions
            let barMargin = 10;
            let barWidth = width / dataSet.length;

            // 5 select all 'g' elements and bind to the dataset
            svg.selectAll('g').remove(); // clear old bars
            let barGroups = svg.selectAll('g').data(dataSet);

            // 6 add new bar groups
            let newBarGroups = barGroups
            .enter()
            .append("g")
            .attr('transform', (d,i) => {
                return `translate(${i*barWidth}, ${(height - (d.totalItems/maxTotalItems) * height)})`;
                // returns transform = "translate(x, y)"
            });

            newBarGroups.append('rect')
            .attr('x', 0)
            .attr('height', (d, i) => {return d.totalItems / maxTotalItems * height})
            .attr('width', barWidth - barMargin)
            .attr('fill', 'black')

            console.log(barWidth);
            console.log(dataSet);
        }

    </script>
}