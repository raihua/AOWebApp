@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "Annual Sales";
}

<h2>Annual Sales Report</h2>

<div class="row">
    <div class="col">
        <select name="year" asp-items="@Model" class="form-control">
            <option value="">Select...</option>
        </select>
    </div>
</div>

<div class="row">
    <div class="col">
        <svg width="100%" height="600px" class="border border-primary rounded p-2">

        </svg>
    </div>
</div>

@section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        // 3 creating the fetch request
        document.getElementsByName("year")[0].addEventListener("change", (e) => {
            let year = e.target.value;

            if (year != null) {
                fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                .then(res => res.json())
                .then(data => {
                    buildGraph(data);
                })
                .catch(err => {
                    console.log(err.message);
                })
            }

        })

        function buildGraph(dataSet) {
            // 1 select svg element
            let svg = d3.select("svg");

            // 2 determine the size of the svg element
            let height = svg.node().getBoundingClientRect().height;
            let width = svg.node().getBoundingClientRect().width;

            //12 chart margins
            const chartMargins = {
                left: 40,
                right: 25,
                top: 25,
                bottom: 80
            }

            // adjust the graph size base on chart margins
            width = width - (chartMargins.left + chartMargins.right);
            height = height - (chartMargins.top + chartMargins.bottom);

            let maxTotalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
            let maxTotalItems = maxTotalItemsRange[1];

            // 4 calculating the bar dimensions
            let barMargin = 10;
            let barWidth = width / dataSet.length;

            // 8 create a y scale
            let yScale = d3.scaleLinear()
            .domain([0, maxTotalItems])  
            .range([height, 0]);

            let monthArray = Array.from(dataSet, (d, i) => d.monthName);

            // 10 create xscale
            let xScale = d3.scaleBand()
            .domain(monthArray)
            .range([0, width])
            .paddingInner(0.1)

            svg.selectAll('g').remove() // clear old bars

            // create chartGroup element
            const chartGroup = svg.append('g')
            .classed('chartGroup', true)
            .attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);

            // 5 select all 'g' elements and bind to the dataset
            chartGroup.selectAll('g').remove(); // clear old bars
            let barGroups = chartGroup.selectAll('g').data(dataSet); //12.4 append the barGroups to the chartGroup

            // 6 add new bar groups
            let newBarGroups = barGroups
            .enter()
            .append("g")
            .attr('transform', (d,i) => {
                return `translate(${xScale(d.monthName)}, ${yScale(d.totalItems)})`;
                // returns transform = "translate(x, y)"
            });

            newBarGroups.append('rect')
            .attr('x', 0)
            .attr('height', (d, i) => {return height - yScale(d.totalItems);})
            .attr('width', xScale.bandwidth())
            .attr('fill', 'black')

            // 11 create the axis and add to the svg
            let yAxis = d3.axisLeft(yScale);
            chartGroup.append('g')
            .classed('axis y', true)
            .call(yAxis)

            // 13 add the x axis to the chartGroup
            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g')
            .classed('axis x', true)
            .attr('transform', (d, i) => {
                return `translate(0, ${height})`;
            })
            .call(xAxis)

            svg
            .selectAll('.axis.x')
            .selectAll('text')
            .attr('transform', 'rotate(-90)')
            .attr('dx', '-0.8em')
            .attr('dy', '0.25em')
            .style('text-anchor', 'end')
            .style('font-size', '1em')

            console.log(barWidth);
            console.log(dataSet);
        }

    </script>
}